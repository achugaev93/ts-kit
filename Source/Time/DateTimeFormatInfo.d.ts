import { ICustomFormatter, IFormatProvider } from '../types';
import { CalendarWeekRule, DayOfWeek } from './types';
import { DateTime } from './DateTime';
import { ReadOnlyCollection } from '../Collections/ReadOnlyCollection';
import { TimeSpan } from './TimeSpan';
export declare class DateTimeFormatInfo implements IFormatProvider, ICustomFormatter<DateTime> {
    static readonly invariantInfo: DateTimeFormatInfo;
    readonly isReadOnly: boolean;
    readonly shortestDayNames: string[];
    readonly abbreviatedDayNames: string[];
    readonly dayNames: string[];
    readonly monthNames: string[];
    readonly abbreviatedMonthNames: string[];
    readonly monthGenitiveNames: string[];
    readonly abbreviatedMonthGenitiveNames: string[];
    readonly amDesignator: string;
    readonly pmDesignator: string;
    readonly calendarWeekRule: CalendarWeekRule;
    readonly firstDayOfWeek: DayOfWeek;
    readonly fullDateTimePattern: string;
    readonly longDatePattern: string;
    readonly longTimePattern: string;
    readonly monthDayPattern: string;
    readonly nativeCalendarName: string;
    readonly rfc1123Pattern: string;
    readonly shortDatePattern: string;
    readonly shortTimePattern: string;
    readonly sortableDateTimePattern: string;
    readonly universalSortableDateTimePattern: string;
    readonly yearMonthPattern: string;
    getFormat(): object;
    format(format: string, time: DateTime | TimeSpan, formatInfo: DateTimeFormatInfo): string;
    protected getTimeComponents(time: DateTime | TimeSpan, formatEntries: ReadOnlyCollection<string>, formatInfo: DateTimeFormatInfo): object;
}
