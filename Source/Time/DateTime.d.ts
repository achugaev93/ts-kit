import { TimeSpan } from './TimeSpan';
import { ICloneable, IComparable, ComparisonResult, IEquatable, IFormattable } from '../types';
import { DayOfWeek } from './types';
import { DateTimeFormatInfo } from './DateTimeFormatInfo';
export declare class DateTime implements ICloneable<DateTime>, IComparable<DateTime>, IEquatable<DateTime>, IFormattable {
    static readonly now: DateTime;
    static fromDate(date: Date): DateTime;
    static fromTimestamp(timestamp: number): DateTime;
    static isLeapYear(year: number): boolean;
    static daysInMonth(year: number, month: number): number;
    private _date;
    readonly year: number;
    readonly month: number;
    readonly dayOfMonth: number;
    readonly dayOfWeek: DayOfWeek;
    readonly dayOfYear: number;
    readonly hours: number;
    readonly minutes: number;
    readonly seconds: number;
    readonly milliseconds: number;
    readonly timezoneOffset: TimeSpan;
    readonly date: DateTime;
    readonly timeOfDay: TimeSpan;
    constructor(year?: number, month?: number, day?: number, hours?: number, minutes?: number, seconds?: number, milliseconds?: number);
    clone(): DateTime;
    compareTo(other: DateTime): ComparisonResult;
    equals(other: DateTime): boolean;
    add(value: TimeSpan): DateTime;
    addMilliseconds(value: number): DateTime;
    addSeconds(value: number): DateTime;
    addMinutes(value: number): DateTime;
    addHours(value: number): DateTime;
    addDays(value: number): DateTime;
    addMonths(value: number): DateTime;
    addYears(value: number): DateTime;
    getTimeSpanTo(other: DateTime): TimeSpan;
    subtract(value: TimeSpan): DateTime;
    toTimestamp(): number;
    toUniversalTime(): DateTime;
    valueOf(): number;
    toString(format?: string, formatInfo?: DateTimeFormatInfo): string;
    toLongDateString(formatInfo?: DateTimeFormatInfo): string;
    toShortDateString(formatInfo?: DateTimeFormatInfo): string;
    toLongTimeString(formatInfo?: DateTimeFormatInfo): string;
    toShortTimeString(formatInfo?: DateTimeFormatInfo): string;
}
