import { ICloneable, IEquatable, IJSONSerializable } from '../types';
import { ReadOnlyCollection } from '../Collections/ReadOnlyCollection';
import { IEnumerable } from '../Collections/IEnumerable';
export declare class BitSet implements ICloneable<BitSet>, IEquatable<BitSet>, IJSONSerializable<boolean[]> {
    static fromBits(bits: IEnumerable<boolean>): BitSet;
    static fromByteArray(bytes: IEnumerable<number>): BitSet;
    private _bits;
    readonly length: number;
    readonly isEmpty: boolean;
    readonly cardinality: number;
    constructor(bitsCount?: number);
    clone(): BitSet;
    equals(other: BitSet): boolean;
    set(bitIndex: number, value?: boolean): void;
    setRange(fromIndex: number, toIndex: number, value?: boolean): void;
    setAll(value?: boolean): void;
    setByMask(mask: BitSet): void;
    clear(bitIndex: number): void;
    clearRange(fromIndex: number, toIndex: number): void;
    clearAll(): void;
    clearByMask(mask: BitSet): void;
    invert(bitIndex: number): void;
    invertRange(fromIndex: number, toIndex: number): void;
    invertAll(): void;
    get(bitIndex: number): boolean;
    getRange(fromIndex: number, toIndex: number): BitSet;
    indexOf(bitValue: boolean, fromIndex?: number): number;
    lastIndexOf(bitValue: boolean, fromIndex?: number): number;
    findBits(bitValue: boolean): ReadOnlyCollection<number>;
    and(set: BitSet): void;
    or(set: BitSet): void;
    xor(set: BitSet): void;
    intersects(other: BitSet): boolean;
    toString(): string;
    toJSON(): boolean[];
    toByteArray(): number[];
}
