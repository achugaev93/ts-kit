import { argument } from '@monument/assert';
import { Delegate } from '@monument/core';
import { randomInt } from '@monument/random';
import { NoSuchItemException } from '../exceptions/NoSuchItemException';

/**
 * Returns random item of given source.
 * Random index will be generated by provided function, which receives range of [0, length).
 * @param self Source
 * @param getIndex Function which generates random integer in range [0, length)
 * @since 0.16.0
 * @author Alex Chugaev
 */
export function random<T>(self: Iterable<T>, getIndex: Delegate<[number, number], number> = randomInt): T {
  const source = [...self];

  if (source.length === 0) {
    throw new NoSuchItemException('Operation is not allowed on empty iterable');
  }

  const index: number = getIndex(0, source.length);

  argument(index >= 0 && index < source.length, `Random function provided index which is out of bounds: index=${index}; length=${source.length}`);

  return source[index];
}
